{"version":3,"file":"index.js","mappings":"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","sources":["webpack://plugin/external [\"wp\",\"element\"]","webpack://plugin/webpack/bootstrap","webpack://plugin/webpack/runtime/compat get default export","webpack://plugin/webpack/runtime/define property getters","webpack://plugin/webpack/runtime/hasOwnProperty shorthand","webpack://plugin/webpack/runtime/make namespace object","webpack://plugin/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict'\n\n\n\nconst {\n    useBlockProps,\n    RichText,\n    InspectorControls,\n    MediaUpload,\n    InnerBlocks,\n    BlockControls,\n    BlockSettingsMenu\n} = wp.blockEditor\n\nconst {\n    Panel,\n    PanelBody,\n    PanelRow,\n    PanelHeader,\n    Button,\n    FormToggle,\n    TextControl\n} = wp.components\n\nwp.blocks.registerBlockType(\n\n    'namespace/name',\n\n    {\n        apiVersion: 2,\n\n        title: 'Custom Block',\n        description: 'Description',\n        icon: 'format-image', // Dashicon\n        category: 'text',\n\n        attributes: {\n            image: {\n                type: 'string',\n                default: null\n            },\n\n            content: {\n                type: 'string',\n                source: 'html',\n                selector: 'p'\n            }\n        },\n\n        edit: properties => {\n\n            const {\n                image,\n                content\n            } = properties.attributes\n\n            // custom functions\n            const onChangeContent = (value) => {\n                properties.etAttributes({content: value})\n            }\n\n            const onSelectImage = (newImage) => {\n                propertiesetAttributes({image: newImage.sizes.full.url}) // <= Should handle multiple sizes here\n            }\n\n\n            return ([\n                <InspectorControls>\n                    <PanelBody title=\"Image Settings\">\n                        <MediaUpload\n                            onSelect={onSelectImage}\n                            type=\"image\"\n                            value={image}\n                            render={({open}) => (\n    \t\t\t\t\t\t\t<Button\n    \t\t\t\t\t\t\t\tclassName=\"editor-media-placeholder__button is-button is-default is-large\"\n    \t\t\t\t\t\t\t\ticon=\"upload\" // Dashicon\n    \t\t\t\t\t\t\t\tonClick={open}>\n    \t\t\t\t\t\t\t\tBackground Image\n    \t\t\t\t\t\t\t</Button>\n    \t\t\t\t\t\t)}/>\n\n                            <PanelRow>\n\n                            </PanelRow>\n                                <label htmlFor=\"toggle\">Dark background</label>\n                                <FormToggle\n                                    id=\"toggle\"\n                                    onChange={(event) => {\n                                        event.target.checked = !event.target.checked\n                                    }}/>\n\n\n                    </PanelBody>\n                </InspectorControls>,\n\n                <div {...useBlockProps()}>\n                    <img src={image} alt=\"\"/>\n\n                    <RichText\n                        key=\"editable\"\n                        tagName=\"p\"\n                        placeholder=\"Type some text...\"\n                        value={content}\n                        onChange={onChangeContent}\n                        inlineToolbar/>\n\n                    <InnerBlocks/>\n                </div>\n            ])\n        },\n\n        save: properties => {\n\n            const {\n                image,\n                content\n            } = properties.attributes\n\n            return ([\n                <div>\n                    <img src={image} alt=\"Image...\"/>\n\n                    <RichText.Content\n                        tagName=\"p\"\n                        value={content}/>\n\n                    <InnerBlocks.Content/>\n                </div>\n            ])\n        }\n    }\n)\n\n/* BLOCK SIDE NOTE */\n\nwp.blocks.registerBlockType(\n\n    'namespace/block-side-note',\n\n    {\n        title: 'Side Note',\n        description: 'Description',\n        icon: 'align-right', //dashicons\n        category: 'text',\n\n        attributes: {\n\n            id: {\n                type: 'string'\n            },\n\n            content: {\n                type: 'string',\n                source: 'attribute',\n                selector: 'p'\n            }\n        },\n\n        edit: ({attributes, setAttributes}) => {\n\n            const {\n                id, content\n            } = attributes\n\n            // custom functions\n            const onChangeID = (value) => {\n                setAttributes({id: value})\n            }\n            const onChangeContent = (value) => {\n                setAttributes({content: value})\n            }\n\n\n            return ([\n                <InspectorControls>\n                    <PanelBody title=\"Side Note ID\">\n                        <PanelRow>\n                            <TextControl\n                                label=\"Add an ID for this side note.\"\n                                value={id}\n                                onChange={onChangeID}\n                            />\n                        </PanelRow>\n                    </PanelBody>\n                </InspectorControls>,\n\n                <>\n\n                    <RichText\n                        key=\"editable\"\n                        tagName=\"p\"\n                        placeholder=\"Type some text...\"\n                        value={content}\n                        onChange={onChangeContent}\n                        inlineToolbar/>\n                </>\n            ])\n        },\n\n        save: properties => {\n\n            const {\n                id, content\n            } = properties.attributes\n\n            return ([\n                <aside class=\"block-side-note\" id={id}>\n                    <span class=\"icon-close\"></span>\n                    <RichText.Content\n                        tagName=\"p\"\n                        value={content}/>\n                </aside>\n            ])\n        }\n    }\n)"],"names":["useBlockProps","RichText","InspectorControls","MediaUpload","InnerBlocks","BlockControls","BlockSettingsMenu","wp","blockEditor","Panel","PanelBody","PanelRow","PanelHeader","Button","FormToggle","TextControl","components","blocks","registerBlockType","apiVersion","title","description","icon","category","attributes","image","type","default","content","source","selector","edit","properties","onChangeContent","value","etAttributes","onSelectImage","newImage","propertiesetAttributes","sizes","full","url","open","event","target","checked","save","id","setAttributes","onChangeID"],"sourceRoot":""}