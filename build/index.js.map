{"version":3,"file":"index.js","mappings":"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","sources":["webpack://plugin/external [\"wp\",\"blockEditor\"]","webpack://plugin/external [\"wp\",\"components\"]","webpack://plugin/external [\"wp\",\"element\"]","webpack://plugin/webpack/bootstrap","webpack://plugin/webpack/runtime/compat get default export","webpack://plugin/webpack/runtime/define property getters","webpack://plugin/webpack/runtime/hasOwnProperty shorthand","webpack://plugin/webpack/runtime/make namespace object","webpack://plugin/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict'\r\n\r\n\r\n\r\nimport {\r\n    useBlockProps,\r\n    RichText,\r\n    InspectorControls,\r\n    MediaUpload,\r\n    InnerBlocks\r\n} from '@wordpress/block-editor'\r\n\r\nimport {\r\n    Panel,\r\n    PanelBody,\r\n    PanelRow,\r\n    PanelHeader,\r\n    Button,\r\n    ToggleControl,\r\n    TextControl\r\n} from '@wordpress/components'\r\n\r\nimport {\r\n    useState\r\n} from '@wordpress/element'\r\n\r\nwp.blocks.registerBlockType(\r\n\r\n    'namespace/name',\r\n\r\n    {\r\n        apiVersion: 2,\r\n\r\n        title: 'Custom Block',\r\n        description: 'Description',\r\n        icon: 'format-image', // Dashicon\r\n        category: 'text',\r\n\r\n        attributes: {\r\n            image: {\r\n                type: 'string',\r\n                default: null\r\n            },\r\n\r\n            content: {\r\n                type: 'string',\r\n                source: 'html',\r\n                selector: 'p'\r\n            }\r\n        },\r\n\r\n        edit: properties => {\r\n\r\n            let [\r\n                state,\r\n                setState\r\n            ] = useState(false)\r\n\r\n            const {\r\n                image,\r\n                content\r\n            } = properties.attributes\r\n\r\n            // custom functions\r\n            const onChangeContent = (value) => {\r\n                properties.etAttributes({content: value})\r\n            }\r\n\r\n            const onSelectImage = (newImage) => {\r\n                properties.setAttributes({image: newImage.sizes.full.url}) // Should handle multiple device screen sizes here\r\n            }\r\n\r\n            return ([\r\n                <InspectorControls>\r\n                    <PanelBody title=\"Image Settings\">\r\n                        <PanelRow>\r\n                            <MediaUpload\r\n                            onSelect={onSelectImage}\r\n                            type=\"image\"\r\n                            value={image}\r\n                            render={({open}) => (\r\n    \t\t\t\t\t\t\t<Button\r\n    \t\t\t\t\t\t\t\tclassName=\"editor-media-placeholder__button is-button is-default is-large\"\r\n    \t\t\t\t\t\t\t\ticon=\"upload\" // Dashicon\r\n    \t\t\t\t\t\t\t\tonClick={open}>\r\n    \t\t\t\t\t\t\t\tBackground Image\r\n    \t\t\t\t\t\t\t</Button>\r\n    \t\t\t\t\t\t)}/>\r\n                        </PanelRow>\r\n\r\n                        <PanelRow>\r\n                            <ToggleControl\r\n                                label=\"Toggle a dark overlay for the image\"\r\n                                help=\"help?...\"\r\n                                checked={state}\r\n                                onChange={() => {\r\n                                    setState((state) => !state)\r\n                                }}/>\r\n                        </PanelRow>\r\n                    </PanelBody>\r\n                </InspectorControls>,\r\n\r\n                <div {...useBlockProps()}>\r\n                    <img src={image} alt=\"\"/>\r\n\r\n                    <RichText\r\n                        key=\"editable\"\r\n                        tagName=\"p\"\r\n                        placeholder=\"Type some text...\"\r\n                        value={content}\r\n                        onChange={onChangeContent}\r\n                        inlineToolbar/>\r\n\r\n                    <InnerBlocks/>\r\n                </div>\r\n            ])\r\n        },\r\n\r\n        save: properties => {\r\n\r\n            const {\r\n                image,\r\n                content\r\n            } = properties.attributes\r\n\r\n            return ([\r\n                <div>\r\n                    <img src={image} alt=\"Image...\"/>\r\n\r\n                    <RichText.Content\r\n                        tagName=\"p\"\r\n                        value={content}/>\r\n\r\n                    <InnerBlocks.Content/>\r\n                </div>\r\n            ])\r\n        }\r\n    }\r\n)\r\n\r\n\r\n\r\n/* BLOCK SIDE NOTE */\r\n\r\nwp.blocks.registerBlockType(\r\n\r\n    'namespace/block-side-note',\r\n\r\n    {\r\n        title: 'Side Note',\r\n        description: 'Description',\r\n        icon: 'align-right', //dashicons\r\n        category: 'text',\r\n\r\n        attributes: {\r\n\r\n            id: {\r\n                type: 'string'\r\n            },\r\n\r\n            content: {\r\n                type: 'string',\r\n                source: 'attribute',\r\n                selector: 'p'\r\n            }\r\n        },\r\n\r\n        edit: properties => {\r\n\r\n            const {\r\n                id,\r\n                content\r\n            } = properties.attributes\r\n\r\n            const onChangeID = (value) => {\r\n                properties.setAttributes({id: value})\r\n            }\r\n\r\n            const onChangeContent = (value) => {\r\n                properties.setAttributes({content: value})\r\n            }\r\n\r\n            return ([\r\n                <InspectorControls>\r\n                    <PanelBody title=\"Side Note ID\">\r\n                        <PanelRow>\r\n                            <TextControl\r\n                                label=\"Add an ID for this side note.\"\r\n                                value={id}\r\n                                onChange={onChangeID}\r\n                            />\r\n                        </PanelRow>\r\n                    </PanelBody>\r\n                </InspectorControls>,\r\n\r\n                <div {...useBlockProps()}>\r\n                    <RichText\r\n                        key=\"editable\"\r\n                        tagName=\"p\"\r\n                        placeholder=\"Type some text...\"\r\n                        value={content}\r\n                        onChange={onChangeContent}\r\n                        inlineToolbar/>\r\n                </div>\r\n            ])\r\n        },\r\n\r\n        save: properties => {\r\n\r\n            const {\r\n                id,\r\n                content\r\n            } = properties.attributes\r\n\r\n            return ([\r\n                <aside className=\"block-side-note\" id={id}>\r\n                    <span className=\"icon-close\"></span>\r\n                    <RichText.Content\r\n                        tagName=\"p\"\r\n                        value={content}/>\r\n                </aside>\r\n            ])\r\n        }\r\n    }\r\n)\r\n"],"names":["useBlockProps","RichText","InspectorControls","MediaUpload","InnerBlocks","Panel","PanelBody","PanelRow","PanelHeader","Button","ToggleControl","TextControl","useState","wp","blocks","registerBlockType","apiVersion","title","description","icon","category","attributes","image","type","default","content","source","selector","edit","properties","state","setState","onChangeContent","value","etAttributes","onSelectImage","newImage","setAttributes","sizes","full","url","open","save","id","onChangeID"],"sourceRoot":""}